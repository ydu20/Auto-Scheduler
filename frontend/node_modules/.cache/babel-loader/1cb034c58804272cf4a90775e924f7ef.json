{"ast":null,"code":"import _slicedToArray from\"/Users/ydu25/Documents/Visual Studio/auto_schedule/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from'react';import{jsx as _jsx}from\"react/jsx-runtime\";var Blocks=function Blocks(_ref){var startTime=_ref.startTime,endTime=_ref.endTime,data=_ref.data;var numRows=(Math.ceil(endTime)-Math.floor(startTime)+1)*4;var numCols=6;var gridStyle=function gridStyle(){return{gridTemplateColumns:'repeat('+numCols+',1fr)',gridTemplateRows:'repeat('+numRows+',1fr)'};};var getColor=function getColor(x){var colors=[\"blue\",\"red\",\"aqua\",\"orange\",\"green\",\"pink\"];return colors[x%8];};var getTextColor=function getTextColor(x){var colors=[\"aqua\",\"orange\",\"blue\",\"red\",\"pink\",\"green\"];return colors[x%8];};var dayToPos=function dayToPos(day){if(day==='M'){return 2;}else if(day==='T'){return 3;}else if(day==='W'){return 4;}else if(day==='R'){return 5;}else{return 6;}};var timeToPos=function timeToPos(time){var hour=parseInt(Math.floor(time));var frac=Math.round((time-hour)/0.6*4);return 5+(hour-Math.floor(startTime))*4+frac;};var getGridRow=function getGridRow(start,end){var returnStr=timeToPos(start).toString()+\"/\"+timeToPos(end).toString();return returnStr;};var generateBlocks=function generateBlocks(){var blocks=[];if(data.timetables.length>0){var timetable=data.timetables[data.position];for(var i=0;i<timetable.length;i++){var bgc=getColor(i);var tc=getTextColor(i);for(var _i=0,_Object$entries=Object.entries(timetable[i].ids);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),key=_Object$entries$_i[0],value=_Object$entries$_i[1];for(var k=0;k<value.length;k++){var day=value[k][0][0];var start=parseFloat(value[k][0].substring(1));var end=parseFloat(value[k][1].substring(1));var block=/*#__PURE__*/_jsx(\"div\",{className:\"class-block\",style:{gridColumn:dayToPos(day),gridRow:getGridRow(start,end),backgroundColor:bgc,color:tc},children:key});blocks.push(block);}}}}return blocks;};return/*#__PURE__*/_jsx(\"div\",{className:\"schedule-blocks\",style:gridStyle(numRows,numCols),children:generateBlocks()});};export default Blocks;","map":{"version":3,"sources":["/Users/ydu25/Documents/Visual Studio/auto_schedule/frontend/src/components/schedule/Blocks.js"],"names":["React","Blocks","startTime","endTime","data","numRows","Math","ceil","floor","numCols","gridStyle","gridTemplateColumns","gridTemplateRows","getColor","x","colors","getTextColor","dayToPos","day","timeToPos","time","hour","parseInt","frac","round","getGridRow","start","end","returnStr","toString","generateBlocks","blocks","timetables","length","timetable","position","i","bgc","tc","Object","entries","ids","key","value","k","parseFloat","substring","block","gridColumn","gridRow","backgroundColor","color","push"],"mappings":"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","sourcesContent":["import React from 'react'\n\n\nconst Blocks = ({startTime, endTime, data}) => {\n\n    var numRows = (Math.ceil(endTime) - Math.floor(startTime) + 1) * 4\n    const numCols = 6\n\n    const gridStyle = () => {\n        return {\n            gridTemplateColumns: 'repeat(' + numCols + ',1fr)',\n        gridTemplateRows: 'repeat(' + numRows + ',1fr)'\n        }\n    };\n\n    const getColor = (x) => {\n        let colors = [\"blue\", \"red\", \"aqua\", \"orange\", \"green\", \"pink\"]\n        return colors[x % 8]\n    }\n\n    const getTextColor = (x) => {\n        let colors = [\"aqua\", \"orange\", \"blue\", \"red\", \"pink\", \"green\"]\n        return colors[x % 8]\n    }\n\n    const dayToPos = (day) => {\n        if (day === 'M') {\n            return 2\n        } else if (day === 'T') {\n            return 3\n        } else if (day === 'W') {\n            return 4\n        } else if (day === 'R') {\n            return 5\n        } else {\n            return 6\n        }\n    }\n\n    const timeToPos = (time) => {\n        let hour = parseInt(Math.floor(time))\n        let frac = Math.round((time-hour) / 0.6 * 4)\n        return 5 + (hour-Math.floor(startTime)) * 4 + frac\n    }\n\n    const getGridRow = (start, end) => {\n        let returnStr = timeToPos(start).toString() + \"/\" + timeToPos(end).toString()\n        return returnStr\n    }\n\n    const generateBlocks = () => {\n        let blocks = []\n        if (data.timetables.length > 0) {\n            let timetable = data.timetables[data.position]\n            for (let i = 0; i < timetable.length; i++) {\n                let bgc = getColor(i)\n                let tc = getTextColor(i)\n                for (const [key, value] of Object.entries(timetable[i].ids)) {\n                    for (let k = 0; k < value.length; k++) {\n                        let day = value[k][0][0]\n                        let start = parseFloat(value[k][0].substring(1))\n                        let end = parseFloat(value[k][1].substring(1))\n                        let block = <div className = \"class-block\" style = {{\n                            gridColumn: dayToPos(day), gridRow: getGridRow(start, end), \n                            backgroundColor: bgc, color: tc}}>\n                            {key}\n                        </div>\n                        blocks.push(block)\n                    }\n                }\n            }\n        }\n        return blocks\n    }\n\n    return (\n        <div className = \"schedule-blocks\"\n        style = {gridStyle(numRows, numCols)}>\n            {generateBlocks()}\n        </div>\n    )\n}\n\nexport default Blocks;"]},"metadata":{},"sourceType":"module"}