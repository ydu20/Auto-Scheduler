{"ast":null,"code":"import _classCallCheck from\"/Users/ydu25/Documents/Visual Studio/auto_schedule/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/ydu25/Documents/Visual Studio/auto_schedule/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/Users/ydu25/Documents/Visual Studio/auto_schedule/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/ydu25/Documents/Visual Studio/auto_schedule/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import _toConsumableArray from\"/Users/ydu25/Documents/Visual Studio/auto_schedule/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import React,{Component}from\"react\";import connect from\"react-redux/es/connect/connect\";import{removeSchedItem}from\"../../actions\";import\"./schedule.css\";import Days from\"./Days\";import Times from\"./Times\";import Block from\"./Block\";import GridLines from\"./GridLines\";// Used for box coloring, from StackOverflow:\n// https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var hashString=function hashString(s){var hash=0;if(s.length===0)return hash;for(var i=0;i<s.length;i+=1){var chr=s.charCodeAt(i);hash=(hash<<5)-hash+chr;hash|=0;// Convert to 32bit integer\n}return hash;};// From an array of meetings, get the groups which conflict in timing.\nexport var getConflictGroups=function getConflictGroups(meetings){// returns true if the two meetings conflict.\nvar overlap=function overlap(m1,m2){var start1=m1.data.start;var start2=m2.data.start;var end1=m1.data.end;var end2=m2.data.end;return m1.data.day===m2.data.day&&!(end1<=start2||end2<=start1);};// get a unique ID for a course's meeting\nvar id=function id(m){return\"\".concat(m.course.id,\"-\").concat(m.data.day,\"-\").concat(m.data.start,\"-\").concat(m.data.end);};// `conflicts` is a union-find datastructure representing \"conflict sets\".\n// https://en.wikipedia.org/wiki/Disjoint-set_data_structure\n// meetings m1 and m2 are in the same conflict set if m1 and m2 conflict\n// with at least one meeting m3 which is also in the set (m3 can be m1 or m2).\nvar conflicts={};var merge=function merge(m1,m2){conflicts[id(m2)]=new Set([].concat(_toConsumableArray(conflicts[id(m1)]),_toConsumableArray(conflicts[id(m2)])));conflicts[id(m1)]=conflicts[id(m2)];};meetings.forEach(function(m){conflicts[id(m)]=new Set([m]);});// compare every pair of meetings. if they overlap, merge their sets.\nfor(var i=0;i<meetings.length-1;i+=1){for(var j=i+1;j<meetings.length;j+=1){if(overlap(meetings[i],meetings[j])){merge(meetings[i],meetings[j]);}}}// remove sets of size 1 from the results; they're not conflicting with anything.\nObject.keys(conflicts).forEach(function(key){if(conflicts[key].size<=1){delete conflicts[key];}});// use a Set to remove duplicates, so we get only unique conflict sets.\nreturn Array.from(new Set(Object.values(conflicts)).values());};var Schedule=/*#__PURE__*/function(_Component){_inherits(Schedule,_Component);var _super=_createSuper(Schedule);function Schedule(){_classCallCheck(this,Schedule);return _super.apply(this,arguments);}_createClass(Schedule,[{key:\"render\",value:function render(){var _this$props=this.props,schedData=_this$props.schedData,removeSection=_this$props.removeSection;var sections=schedData.meetings||[];if(sections.length<1){return/*#__PURE__*/_jsx(EmptySchedule,{});}var startHour=10.5;var endHour=16;// get the minimum start hour and the max end hour to set bounds on the schedule.\nstartHour=Math.floor(Math.min.apply(Math,[startHour].concat(_toConsumableArray(sections.map(function(m){return m.meetHour;}))))-0.5);endHour=Math.ceil(Math.max.apply(Math,[endHour].concat(_toConsumableArray(sections.map(function(m){return m.meetHour+m.hourLength;}))))+0.5);// show the weekend days only if there's a section which meets on saturday (S) or sunday (U)\nvar showWeekend=sections.filter(function(sec){return sec.meetDay.indexOf(\"S\")!==-1||sec.meetDay.indexOf(\"U\")!==-1;}).length>0;// actual schedule elements are offset by the row/col offset since\n// days/times take up a row/col respectively.\nvar rowOffset=1;var colOffset=1;var getNumRows=function getNumRows(){return(Math.ceil(endHour)-Math.floor(startHour))*2+rowOffset;};var getNumCol=function getNumCol(){return 5+colOffset+(showWeekend?2:0);};// step 2 in the CIS121 review: hashing with linear probing.\n// hash every section to a color, but if that color is taken, try the next color in the\n// colors array. Only start reusing colors when all the colors are used.\nvar getColor=function(){var colors=[\"blue\",\"red\",\"aqua\",\"orange\",\"green\",\"pink\",\"sea\",\"indigo\"];// some CIS120: `used` is a *closure* storing the colors currently in the schedule\nvar used=[];return function(c){if(used.length===colors.length){// if we've used all the colors, it's acceptable to start reusing colors.\nused=[];}var i=hashString(c);while(used.indexOf(colors[i%colors.length])!==-1){i+=1;}var color=colors[i%colors.length];used.push(color);return color;};}();var sectionIds=sections.map(function(x){return x.idDashed;});// a meeting is the data that represents a single block on the schedule.\nvar meetings=[];sections.forEach(function(m){var days=m.meetDay.split(\"\");// generate as many meetings as there are days\nvar color=getColor(m.idDashed);meetings.push.apply(meetings,_toConsumableArray(days.map(function(d){return{data:{day:d,start:m.meetHour,end:m.meetHour+m.hourLength},course:{color:color,id:m.idDashed,fullID:m.fullID,coreqFulfilled:m.SchedAsscSecs.filter(function(coreq){return sectionIds.indexOf(coreq)!==-1;}).length>0},style:{width:\"100%\",left:0}};})));});getConflictGroups(meetings).forEach(function(conflict){// for every conflict of size k, make the meetings in that conflict\n// take up (100/k) % of the square, and use `left` to place them\n// next to each other.\nvar group=Array.from(conflict.values());var w=100/group.length;for(var j=0;j<group.length;j+=1){group[j].style={width:\"\".concat(w,\"%\"),left:\"\".concat(w*j,\"%\")};}});// generate actual block components.\n// position in grid is determined by the block given the meeting info and grid offsets.\nvar blocks=meetings.map(function(meeting){return/*#__PURE__*/_jsx(Block,{meeting:meeting.data,course:meeting.course,style:meeting.style,offsets:{time:startHour,row:rowOffset,col:colOffset},remove:function remove(){return removeSection(meeting.course.fullID);}},\"\".concat(meeting.course.id,\"-\").concat(meeting.data.day));});var dims={gridTemplateColumns:\".4fr repeat(\".concat(getNumCol()-1,\", 1fr)\"),gridTemplateRows:\"repeat(\".concat(getNumRows(),\", 1fr)\")};return/*#__PURE__*/_jsxs(\"div\",{className:\"schedule box\",style:dims,children:[/*#__PURE__*/_jsx(Days,{offset:colOffset,weekend:showWeekend}),/*#__PURE__*/_jsx(Times,{startTime:startHour,endTime:endHour,numRow:getNumRows(),offset:rowOffset}),/*#__PURE__*/_jsx(GridLines,{numRow:getNumRows(),numCol:getNumCol()}),blocks]});}}]);return Schedule;}(Component);var mapStateToProps=function mapStateToProps(state){return{schedData:state.schedule.schedules[state.schedule.scheduleSelected]};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{removeSection:function removeSection(idDashed){return dispatch(removeSchedItem(idDashed));}};};export default connect(mapStateToProps,mapDispatchToProps)(Schedule);var EmptySchedule=function EmptySchedule(){return/*#__PURE__*/_jsxs(\"div\",{className:\"box\",style:{height:\"100%\"},children:[/*#__PURE__*/_jsxs(\"p\",{style:{fontSize:\"1.5em\",marginTop:\"7em\",display:\"block\"},children:[\"Search for courses above\",/*#__PURE__*/_jsx(\"br\",{}),\"then click a section's + icon to add it to the schedule.\"]}),/*#__PURE__*/_jsxs(\"p\",{style:{fontSize:\"1em\"},children:[\"These are mock schedules.\",/*#__PURE__*/_jsx(\"br\",{}),\"You still need to register for your classes on Penn InTouch.\"]})]});};","map":{"version":3,"sources":["/Users/ydu25/Documents/Visual Studio/auto_schedule/frontend/src/components/schedule/Schedule.js"],"names":["React","Component","connect","removeSchedItem","Days","Times","Block","GridLines","hashString","s","hash","length","i","chr","charCodeAt","getConflictGroups","meetings","overlap","m1","m2","start1","data","start","start2","end1","end","end2","day","id","m","course","conflicts","merge","Set","forEach","j","Object","keys","key","size","Array","from","values","Schedule","props","schedData","removeSection","sections","startHour","endHour","Math","floor","min","map","meetHour","ceil","max","hourLength","showWeekend","filter","sec","meetDay","indexOf","rowOffset","colOffset","getNumRows","getNumCol","getColor","colors","used","c","color","push","sectionIds","x","idDashed","days","split","d","fullID","coreqFulfilled","SchedAsscSecs","coreq","style","width","left","conflict","group","w","blocks","meeting","time","row","col","dims","gridTemplateColumns","gridTemplateRows","mapStateToProps","state","schedule","schedules","scheduleSelected","mapDispatchToProps","dispatch","EmptySchedule","height","fontSize","marginTop","display"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport connect from \"react-redux/es/connect/connect\";\n\nimport { removeSchedItem } from \"../../actions\";\n\nimport \"./schedule.css\";\nimport Days from \"./Days\";\nimport Times from \"./Times\";\nimport Block from \"./Block\";\nimport GridLines from \"./GridLines\";\n\n// Used for box coloring, from StackOverflow:\n// https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript\nconst hashString = (s) => {\n    let hash = 0;\n    if (s.length === 0) return hash;\n    for (let i = 0; i < s.length; i += 1) {\n        const chr = s.charCodeAt(i);\n        hash = ((hash << 5) - hash) + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n    return hash;\n};\n\n\n// From an array of meetings, get the groups which conflict in timing.\nexport const getConflictGroups = (meetings) => {\n    // returns true if the two meetings conflict.\n    const overlap = (m1, m2) => {\n        const start1 = m1.data.start;\n        const start2 = m2.data.start;\n        const end1 = m1.data.end;\n        const end2 = m2.data.end;\n        return m1.data.day === m2.data.day && !(end1 <= start2 || end2 <= start1);\n    };\n    // get a unique ID for a course's meeting\n    const id = m => `${m.course.id}-${m.data.day}-${m.data.start}-${m.data.end}`;\n\n    // `conflicts` is a union-find datastructure representing \"conflict sets\".\n    // https://en.wikipedia.org/wiki/Disjoint-set_data_structure\n    // meetings m1 and m2 are in the same conflict set if m1 and m2 conflict\n    // with at least one meeting m3 which is also in the set (m3 can be m1 or m2).\n    const conflicts = {};\n    const merge = (m1, m2) => {\n        conflicts[id(m2)] = new Set(\n            [...conflicts[id(m1)], ...conflicts[id(m2)]]\n        );\n        conflicts[id(m1)] = conflicts[id(m2)];\n    };\n\n    meetings.forEach((m) => {\n        conflicts[id(m)] = new Set([m]);\n    });\n\n    // compare every pair of meetings. if they overlap, merge their sets.\n    for (let i = 0; i < meetings.length - 1; i += 1) {\n        for (let j = i + 1; j < meetings.length; j += 1) {\n            if (overlap(meetings[i], meetings[j])) {\n                merge(meetings[i], meetings[j]);\n            }\n        }\n    }\n\n    // remove sets of size 1 from the results; they're not conflicting with anything.\n    Object.keys(conflicts).forEach((key) => {\n        if (conflicts[key].size <= 1) {\n            delete conflicts[key];\n        }\n    });\n    // use a Set to remove duplicates, so we get only unique conflict sets.\n    return Array.from(new Set(Object.values(conflicts)).values());\n};\n\nclass Schedule extends Component {\n    render() {\n        const { schedData, removeSection } = this.props;\n        const sections = schedData.meetings || [];\n\n        if (sections.length < 1) {\n            return <EmptySchedule />;\n        }\n\n        let startHour = 10.5;\n        let endHour = 16;\n\n        // get the minimum start hour and the max end hour to set bounds on the schedule.\n        startHour = Math.floor(\n            Math.min(startHour, ...sections.map(m => m.meetHour)) - 0.5\n        );\n        endHour = Math.ceil(\n            Math.max(endHour, ...sections.map(m => m.meetHour + m.hourLength)) + 0.5\n        );\n\n        // show the weekend days only if there's a section which meets on saturday (S) or sunday (U)\n        const showWeekend = sections.filter(\n            sec => sec.meetDay.indexOf(\"S\") !== -1 || sec.meetDay.indexOf(\"U\") !== -1\n        ).length > 0;\n\n        // actual schedule elements are offset by the row/col offset since\n        // days/times take up a row/col respectively.\n        const rowOffset = 1;\n        const colOffset = 1;\n\n        const getNumRows = () => (Math.ceil(endHour) - Math.floor(startHour)) * 2 + rowOffset;\n        const getNumCol = () => 5 + colOffset + (showWeekend ? 2 : 0);\n\n        // step 2 in the CIS121 review: hashing with linear probing.\n        // hash every section to a color, but if that color is taken, try the next color in the\n        // colors array. Only start reusing colors when all the colors are used.\n        const getColor = (() => {\n            const colors = [\"blue\", \"red\", \"aqua\", \"orange\", \"green\", \"pink\", \"sea\", \"indigo\"];\n            // some CIS120: `used` is a *closure* storing the colors currently in the schedule\n            let used = [];\n            return (c) => {\n                if (used.length === colors.length) {\n                    // if we've used all the colors, it's acceptable to start reusing colors.\n                    used = [];\n                }\n                let i = hashString(c);\n                while (used.indexOf(colors[i % colors.length]) !== -1) {\n                    i += 1;\n                }\n                const color = colors[i % colors.length];\n                used.push(color);\n                return color;\n            };\n        })();\n        const sectionIds = sections.map(x => x.idDashed);\n        // a meeting is the data that represents a single block on the schedule.\n        const meetings = [];\n        sections.forEach((m) => {\n            const days = m.meetDay.split(\"\"); // generate as many meetings as there are days\n            const color = getColor(m.idDashed);\n            meetings.push(...days.map(d => (\n                {\n                    data: {\n                        day: d,\n                        start: m.meetHour,\n                        end: m.meetHour + m.hourLength,\n                    },\n                    course: {\n                        color,\n                        id: m.idDashed,\n                        fullID: m.fullID,\n                        coreqFulfilled: m.SchedAsscSecs.filter(\n                            coreq => sectionIds.indexOf(coreq) !== -1\n                        ).length > 0,\n                    },\n                    style: {\n                        width: \"100%\",\n                        left: 0,\n                    },\n                }\n            )));\n        });\n\n        getConflictGroups(meetings).forEach((conflict) => {\n            // for every conflict of size k, make the meetings in that conflict\n            // take up (100/k) % of the square, and use `left` to place them\n            // next to each other.\n            const group = Array.from(conflict.values());\n            const w = 100 / group.length;\n            for (let j = 0; j < group.length; j += 1) {\n                group[j].style = {\n                    width: `${w}%`,\n                    left: `${w * j}%`,\n                };\n            }\n        });\n        // generate actual block components.\n        // position in grid is determined by the block given the meeting info and grid offsets.\n        const blocks = meetings.map(meeting => (\n            <Block\n                meeting={meeting.data}\n                course={meeting.course}\n                style={meeting.style}\n                offsets={{\n                    time: startHour,\n                    row: rowOffset,\n                    col: colOffset,\n                }}\n                key={`${meeting.course.id}-${meeting.data.day}`}\n                remove={() => removeSection(meeting.course.fullID)}\n            />\n        ));\n\n        const dims = {\n            gridTemplateColumns: `.4fr repeat(${getNumCol() - 1}, 1fr)`,\n            gridTemplateRows: `repeat(${getNumRows()}, 1fr)`,\n        };\n\n        return (\n            <div className=\"schedule box\" style={dims}>\n                <Days offset={colOffset} weekend={showWeekend} />\n                <Times\n                    startTime={startHour}\n                    endTime={endHour}\n                    numRow={getNumRows()}\n                    offset={rowOffset}\n\n                />\n                <GridLines\n                    numRow={getNumRows()}\n                    numCol={getNumCol()}\n                />\n                {blocks}\n            </div>\n        );\n    }\n}\n\nSchedule.propTypes = {\n    schedData: PropTypes.shape({\n        meetings: PropTypes.array,\n    }),\n    removeSection: PropTypes.func,\n};\n\nconst mapStateToProps = state => (\n    {\n        schedData: state.schedule.schedules[state.schedule.scheduleSelected],\n    }\n);\n\n\nconst mapDispatchToProps = dispatch => (\n    {\n        removeSection: idDashed => dispatch(removeSchedItem(idDashed)),\n    }\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Schedule);\n\nconst EmptySchedule = () => (\n    <div className=\"box\" style={{ height: \"100%\" }}>\n        <p style={{ fontSize: \"1.5em\", marginTop: \"7em\", display: \"block\" }}>\n            Search for courses above\n            <br />\n            then click a section&#39;s + icon to add it to the schedule.\n        </p>\n        <p style={{ fontSize: \"1em\" }}>\n            These are mock schedules.\n            <br />\n            You still need to register for your classes on Penn InTouch.\n        </p>\n    </div>\n);\n"]},"metadata":{},"sourceType":"module"}